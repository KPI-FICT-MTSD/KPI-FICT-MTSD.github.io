=====
Вступ
=====


Індустрія IT — величезна, і куди саме вас занесе доля — я не знаю, і не можу
знати. Що ви використовуватимете? Як працюватимете? Хтозна. Цей курс багато
позичив із курсу про тестування програмного забезпечення, а той у свою чергу —
базується на власному досвіді, так і на досвіді інших. За основу для матеріалу
там вибрали книгу `Software Engineering @ Google видавництва O’Reilly
<https://abseil.io/resources/swe-book>`_. Там описані підходи і практики, які
працюють для багатьох команд в Google. Також до них примішано і власний досвід.
Але те, що спрацювало для інших зовсім не обов’язково працюватиме для вас у
вашій компанії, на це впливає чимало різних факторів. Тому не треба сприймати
усе в цьому курсі як нерушиму істину. Це не догми і не заповіді. Правила, про
які я розповідаю, можна, а інколи і просто необхідно порушувати. Головне —
завжди пам’ятати про здоровий ґлузд і розуміти, що і навіщо ви робите.

Якщо я не помиляюся, ваша спеціальність називається саме так: “Інженерія
програмного забезпечення”. Багато хто із вас та й інших студентів, в т.ч. вже
випускників, коли їх питають чим ви займаєтеся, відповідають — програмуванням.
Як ви думаєте, це одне й те саме? Чи є відмінність між програмною інженерією
(software engineering) та програмуванням (programming)?

Імениті дядьки, на кшталт Роба Пайка чи Тайтуса Вінтерса, чи навіть того
рандомного чєла в коментарях на stackoverflow, визначають програмну інженерію
як програмування, що йде крізь час. Часто — ще й крізь декілька людей. Яким же
чином час може впливати на ваш проект?

- Ви запилили лабку, запустили її на своєму компі, щоб показати викладачу і
  забули про неї. Це **програмування**
- Коли ви пилите проект, у вас на компі накрився диск, даним на ньому прийшли
  гайки, але ви купили новий і трагедії не відбулося — круто, це **інженерія**

Також, мова йде про інженерію:

- Коли прилетіло оновлення ОС, а ваше рішення як працювало раніше, так і працює
- Коли вийшла нова версія бібліотеки і ви змогли швидко оновити цю бібліотеку
  не зламавши при цьому програму
- Коли вийшла нова версія мови програмування, підтримка старої закінчена, а ваш
  проект все ще компілюється
- Коли ви можете внести зміни у код так, щоб нічого іншого не зламати
- Коли до вас на проект приєдналися ваші колеги
- Коли ви звільнилися, а інші продовжують займатися вашим проектом


Якщо вам важливо, щоб ваш проект працював і в майбутньому, незважаючи на купу
різних факторів — ви займаєтеся програмною інженерією. Якщо вам треба запустити
код раз чи два і викинути — це програмування. Але скільки може жити ваш код?
Протягом якого часу його будуть використовувати? Хвилини? Дні? Місяці? Давайте
спробуємо навести приклади для кожної з категорій:

не більше **декількох хвилин** буде використовуватися цикл в командному рядку для
одноманітної обробки десятків файлів (наприклад, щоб конвертувати з десяток
відео з одного формату в інший).

**Дні-тижні** — на жаль, більшість проектів, які ви робите в університеті. Лабки
будуть здані і забуті. В кращому випадку передані наступним поколінням за
шоколадку, які так само здадуть, забудуть, передадуть. Можливо пару місяців ви
працюватимете над дипломом чи курсачом.

**Місяці** — більшість стартапів. Мета стартапу — протриматися до наступного раунду
фінансування, нарощуючи фічі і затягуючи клієнтів. Небагатьом вдається вижити,
і вони закриваються. Також сюди можна віднести якісь AB-тести або
Proof-of-Concept в компаніях, які живуть стільки, скільки необхідно для
перевірки тієї чи іншої гіпотези.

**Роками та десятиліттями** живуть великі і успішні продукти. Власники цих
продуктів не збираються їх закривати. Спільнота Linux не збирається припиняти
розробку ядра. Можливо, колись воно загнеться, але поки усе йде добре — проекти
мають діяти так, ніби їхній код існуватиме вічно
